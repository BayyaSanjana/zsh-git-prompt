This is a fork of https://github.com/olivierverdier/zsh-git-prompt

h2. Changes include:
* gnome-terminal friendly symbols.
* tracking deleted files & changed files separately.
* git status shows up on executing any command instead of 'git' only commands.

h2. Informative git prompt for zsh

A *zsh* prompt that displays information about the current git repository.
In particular the branch name, difference with remote branch, number of files staged, changed, etc.

(an original idea from this "blog entry":http://sebastiancelis.com/2009/nov/16/zsh-prompt-git-users).

h2. Examples

The prompt may look like the following:

* @(master << 3 >> 1)@ : on branch master, ahead of remote by 3 commits, 1 file changed but not staged
* @(status +2)@ : on branch status, 2 files staged
* @(master| ~7 - 2...)@ : on branch master, 7 files changed, 2 files deleted & some files untracked
* @(master| !2 ~3)@ : on branch master, 2 conflicts, 3 files changed
* @(experimental >> 2 << 3)@ : on branch experimental; your branch has diverged by 3 commits, remote by 2 commits
* @(:70c2952)@ : not on any branch; parent commit has sha1 70c2952

Here is how it could look like when you are ahead by 4 commits, behind by 5 commits, and have 1 staged files, 1 changed but unstaged file, and some untracked files, on branch dev:

!https://github.com/openbala/zsh-git-prompt/raw/master/screenshot.png(an example)!

h2. Symbols

The symbols are as follows:

* Status Symbols
 | @(green color branch)@: | repository clean |
 | @:+n (blue color)@: | there are @n@ staged files |
 | @:!n (white color)@: | there are @n@ unmerged files |
 | @:~n (yellow color)@: | there are @n@ changed but _unstaged_ files |
 | @:-n (red color)@: | there are @n@ deleted files |
 | @:...:@ | there are some untracked files |

* Branch Symbols
| @>> m << n@: | branches diverged, other by @m@ commits, yours by @n@ commits |
| @<< n@: | ahead of remote by @n@ commits |
| @>> n@: | behind remote by @n@ commits |
| @:@: | when the branch name starts with a colon @:@, it means it's actually a hash, not a branch (although it should be pretty clear, unless you name your branches like hashes :-) |

h2. Install

1. Create the directory @~/.zsh/git-prompt@ if it does not exist (this location is customizable).
2. Move the file @gitstatus.py@ into @~/.zsh/git-prompt/@
3. Source the file @zshrc.sh@ from your @~/.zshrc@ config file, and, configure your prompt. So, somewhere in @~/.zshrc@, you should have:

	<pre>
		source path/to/zshrc.sh
		&#35; an example prompt
		PROMPT='&#37;B&#37;m&#37;&#126;&#37;b$(git_super_status) &#37;&#35; '
	</pre>

4. You may also redefine the function @git_super_status@ (after the @source@ statement) to adapt it to your needs (to change the order in which the information is displayed). You may also change a number of variables (which name start with @ZSH_THEME_GIT_PROMPT_@) to change the appearance of the prompt. Take a look in the file @zshrc.sh@ to see how this function is defined, and what variables are available.

5. Go in a git repository and test it!

*Enjoy!*
